---
 lib/libufs/block.c   |    2 ++
 lib/libufs/type.c    |    4 +++-
 sys/ufs/ffs/fs.h     |    5 ++++-
 sys/ufs/ufs/dinode.h |    2 ++
 sys/ufs/ufs/dir.h    |    2 ++
 5 files changed, 13 insertions(+), 2 deletions(-)

--- a/lib/libufs/type.c
+++ b/lib/libufs/type.c
@@ -111,7 +111,7 @@ again:	if ((ret = stat(name, &st)) < 0)
 	if (ret >= 0 && S_ISREG(st.st_mode)) {
 		/* Possibly a disk image, give it a try.  */
 		;
-	} else if (ret >= 0 && S_ISCHR(st.st_mode)) {
+	} else if (ret >= 0 && (S_ISCHR(st.st_mode) || S_ISBLK(st.st_mode))) {
 		/* This is what we need, do nothing. */
 		;
 	} else if ((fs = getfsfile(name)) != NULL) {
@@ -134,8 +134,10 @@ again:	if ((ret = stat(name, &st)) < 0)
 			ERROR(disk, "could not find special device");
 			return (-1);
 		}
+#if HAVE_BSD_STATFS
 		strlcpy(dev, sfs.f_mntfromname, sizeof(dev));
 		name = dev;
+#endif
 	} else {
 		ERROR(disk, "could not find special device");
 		return (-1);
--- a/sys/ufs/ffs/fs.h
+++ b/sys/ufs/ffs/fs.h
@@ -33,6 +33,9 @@
 #ifndef _UFS_FFS_FS_H_
 #define _UFS_FFS_FS_H_
 
+#include <sys/types.h>
+#include <stdint.h>
+
 /*
  * Each disk drive contains some number of filesystems.
  * A filesystem consists of a number of cylinder groups.
@@ -504,7 +507,7 @@ struct cg {
  * Turn filesystem block numbers into disk block addresses.
  * This maps filesystem blocks to device size blocks.
  */
-#define	fsbtodb(fs, b)	((daddr_t)(b) << (fs)->fs_fsbtodb)
+#define	fsbtodb(fs, b)	(((intmax_t)(b)) << (fs)->fs_fsbtodb)
 #define	dbtofsb(fs, b)	((b) >> (fs)->fs_fsbtodb)
 
 /*
--- a/sys/ufs/ufs/dinode.h
+++ b/sys/ufs/ufs/dinode.h
@@ -68,6 +68,8 @@
 #ifndef _UFS_UFS_DINODE_H_
 #define	_UFS_UFS_DINODE_H_
 
+#include <sys/types.h>
+
 /*
  * The root inode is the root of the filesystem.  Inode 0 can't be used for
  * normal purposes and historically bad blocks were linked to inode 1, thus
--- a/sys/ufs/ufs/dir.h
+++ b/sys/ufs/ufs/dir.h
@@ -38,6 +38,8 @@
 #ifndef _UFS_UFS_DIR_H_
 #define	_UFS_UFS_DIR_H_
 
+#include <sys/types.h>
+
 /*
  * Theoretically, directories can be more than 2Gb in length, however, in
  * practice this seems unlikely. So, we define the type doff_t as a 32-bit
--- a/lib/libufs/block.c
+++ b/lib/libufs/block.c
@@ -30,7 +30,9 @@ __FBSDID("$FreeBSD$");
 
 #include <sys/param.h>
 #include <sys/mount.h>
+#ifdef HAVE_BSD_DISKLABEL
 #include <sys/disk.h>
+#endif
 #include <sys/disklabel.h>
 #include <sys/stat.h>
 
